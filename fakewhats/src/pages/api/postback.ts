import type { APIRoute } from 'astro';

export const prerender = false;

export const POST: APIRoute = async ({ request }) => {
  try {
    const data = await request.json();
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    console.log('[UROXEL Lead]', {
      serverTimestamp: new Date().toISOString(),
      name: data.name,
      phone: data.phone,
      calltime: data.calltime || data.callTime,
      reason: data.reason,
      videoWatchTime: data.videoWatchTime,
      userAgent: data.ua || data.userAgent,
      clientTimestamp: data.ts || data.timestamp
    });

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å CRM —Å–∏—Å—Ç–µ–º–∞–º–∏
    // –ù–∞–ø—Ä–∏–º–µ—Ä: –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram, Email, CRM API –∏ —Ç.–¥.
    
    // –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    /*
    if (process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_CHAT_ID) {
      const message = `üî• –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê UROXEL!\n\nüë§ –ò–º—è: ${data.name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}\n‚è∞ –í—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞: ${data.calltime || '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}\nüéØ –ò—Å—Ç–æ—á–Ω–∏–∫: ${data.reason}\n‚è±Ô∏è –í—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ: ${data.videoWatchTime || 0} —Å–µ–∫`;
      
      await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: process.env.TELEGRAM_CHAT_ID,
          text: message,
          parse_mode: 'HTML'
        })
      });
    }
    */

    return new Response(JSON.stringify({ 
      ok: true, 
      message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
      timestamp: new Date().toISOString()
    }), { 
      status: 200,
      headers: {
        'Content-Type': 'application/json'
      }
    });
  } catch (e) {
    console.error('[Postback Error]', e);
    return new Response(JSON.stringify({ 
      ok: false, 
      error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏',
      details: e instanceof Error ? e.message : 'Unknown error'
    }), { 
      status: 500,
      headers: {
        'Content-Type': 'application/json'
      }
    });
  }
};


